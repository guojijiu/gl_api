# CI/CD 工作流配置
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: 'your-registry.com'
  IMAGE_NAME: 'cloud-platform-api'

jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 安装依赖
        run: |
          go mod download
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: 运行代码检查
        run: |
          golangci-lint run --timeout=5m

      - name: 检查代码格式
        run: |
          go fmt ./...
          if [ -n "$(git status --porcelain)" ]; then
            echo "代码格式不正确，请运行 go fmt ./..."
            exit 1
          fi

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 安装依赖
        run: go mod download

      - name: 运行单元测试
        run: |
          go test -v -race -coverprofile=coverage.out ./...
        env:
          DB_DRIVER: mysql
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: root
          DB_DATABASE: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_key_for_testing_only

      - name: 生成测试覆盖率报告
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: 上传测试覆盖率
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # 性能基准测试
  benchmark:
    name: 性能基准测试
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 安装依赖
        run: go mod download

      - name: 运行性能基准测试
        run: |
          chmod +x ./scripts/run_benchmarks.sh
          ./scripts/run_benchmarks.sh

      - name: 上传基准测试结果
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: ./benchmark_results/

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 安装依赖
        run: go mod download

      - name: 运行安全扫描
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: 检查依赖漏洞
        run: |
          go list -json -deps ./... | nancy sleuth

  # 构建Docker镜像
  build:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.event_name == 'push'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到测试环境
        run: |
          echo "部署到测试环境..."
          # 这里添加部署到测试环境的脚本
          # 例如：kubectl apply -f k8s/staging/
          # 或者：docker-compose -f docker-compose.staging.yml up -d

      - name: 运行健康检查
        run: |
          echo "等待服务启动..."
          sleep 30
          curl -f http://staging.example.com/health || exit 1

      - name: 运行集成测试
        run: |
          echo "运行集成测试..."
          # 这里添加集成测试脚本

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到生产环境
        run: |
          echo "部署到生产环境..."
          # 这里添加部署到生产环境的脚本
          # 例如：kubectl apply -f k8s/production/
          # 或者：docker-compose -f docker-compose.prod.yml up -d

      - name: 运行健康检查
        run: |
          echo "等待服务启动..."
          sleep 60
          curl -f https://api.example.com/health || exit 1

      - name: 发送部署通知
        run: |
          echo "发送部署通知..."
          # 这里添加通知脚本，例如发送到Slack、邮件等

  # 回滚
  rollback:
    name: 回滚部署
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    steps:
      - name: 回滚到上一个版本
        run: |
          echo "回滚到上一个版本..."
          # 这里添加回滚脚本

      - name: 发送回滚通知
        run: |
          echo "发送回滚通知..."
          # 这里添加通知脚本
