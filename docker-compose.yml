version: '3.8'

services:
  # 主应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cloud-platform-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - ENVIRONMENT=production
      - SERVER_PORT=8080
      - SERVER_MODE=production
      - DB_DRIVER=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=cloud_platform
      - DB_PASSWORD=cloud_platform_password
      - DB_DATABASE=cloud_platform
      - DB_CHARSET=utf8mb4
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DATABASE=0
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRE_TIME=24
    depends_on:
      - postgres
      - redis
    volumes:
      - ./storage:/app/storage
      - app_logs:/app/logs
    networks:
      - cloud-platform-network

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: cloud-platform-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cloud_platform
      - POSTGRES_USER=cloud_platform
      - POSTGRES_PASSWORD=cloud_platform_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - cloud-platform-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: cloud-platform-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cloud-platform-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: cloud-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - app_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - cloud-platform-network

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: cloud-platform-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cloud-platform-network

  # Grafana监控面板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: cloud-platform-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cloud-platform-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cloud-platform-network:
    driver: bridge
